from math import log2
#Funcion que recibe un archivo de texto y retorna una cadena
print("Solucion la 1ra Tarea\n Teoria de la Información")
def leer_archivo():
  x = open('capitulo.txt', 'r', encoding = 'utf-8')
  Texto = f.read()
  return Texto

#Funcion para calcular el numero de caracteres que hay en el texto
def num_caracteres():
  num = leer_archivo()
  retur len(num)

#Funcion que recibe un diccionario organiza sus claves según sus valores en orden descendente e imprime las claves y sus valores correspondientes en ese orden.
def ordenar(diccionario):
  claves = list(diccionario.keys()) 
  claves.sort(key=lambda c: dicc[c], reserve = True)
  for i in claves:
    j = diccionario[i]
    msm = "La clave {i} tiene un valor de {j}"
    print(msm)
  return "\n"

#Funcion que retorna un diccionario donde las claves son simbolos individuales del texto y los valores son las frecuencia de aparicion
def numCarateres_individuales():
  Texto = leer_archivo()
  diccionario = {}
  for x in Texto:
    if x not in diccionario:
      diccionario[x] = 1
    else:
      num = diccionario[x]
      diccionario[x] = num + 1
  return diccionario

#Funcion que devuelve un diccionario en donde las claves son pares de simbolos consecutivos y su valor es el numero total de veces que cada par aparece 
def pares_repetidos():
  diccionario = {}
  Texto = leer_archivo()
  cadena = ""
  n = 0
  for x in Texto:
    cadena += x
    n += 1
    if n == 2:
      if cadena not in diccionario:
        diccionario[cadena] = 1
      else:
        npares = diccionario[cadena]
        diccionario[cadena] = npares + 1
      n = 0
      cadena = ""
  return diccionario

#Funcion que hace un conteo de los pares repetidos y retorna un diccionario con cada uno de ellos(claves) y el numero de veces que aparece(valor).
def pares_repetidos():
  Texto = leer_archivo()
  cadena = ""
  n = 0
  diccionario = {}
  for x in Texto:
    cadena += i
    if n == 1:
      if cadena not in diccionario:
          diccionario[cadena] = 1
                
      else:
          npares = diccionario[cadena]
          diccionario[cadena] = npares + 1
      n = 0
      cadena = i
    n += 1
  return diccionario


def punto_4():
  print("\n","Cuarto punto: \n")
  texto = lectura_archivo()
  longitud = len(texto)
  estados = numCarateres_individuales()#Funcion4
  pares = repeticion_de_pares() #Funcion6
  p_condicional = {}
  for i in pares.keys():
      for j in estados.keys():
          if i[:len(j)] == j:
              p_condicional[i] = pares[i]/estados[j]
  
  #print(estados)
  #print()
  #print(pares)
  #print()
  entropia_dict = {}

  for i, valor in p_condicional.items():
      entropia = valor * log2(1/valor)
      entropia_dict[i] = entropia
  
  entropia_estados = {}

  for clave in entropia_dict:
      prefijo = clave[:-1]
      valor = entropia_dict[clave]
      if prefijo in entropia_estados:
          entropia_estados[prefijo] += valor
      else:
          entropia_estados[prefijo] = valor
  
  for i in estados:
      estados[i] /= longitud

  entropias_ponderadas = {}  
  for clave in entropia_estados:
      entropias_ponderadas[clave] = entropia_estados[clave] * estados[clave]

  suma = sum(entropias_ponderadas.values())

  #print(prob_condicional)
  #print()
  #print(entropia_dict)
  #print()
  #print(entropia_estados)
  #print()
  #print(estados)
  #print()
  print("La entropia del cuarto punto es:",suma,"\n")
  print("La información total den este caso seía:",suma*num_caracteres(),"\n")
  return "------------------------------------------------"

print("------------------------------------------------")
print("La entropia del primer punto es:","\n",punto_1(),"\n")
print("La entropia del segundo punto es: ", "\n",punto_2(),"\n")
print("La entropia del tercer punto es:", "\n",punto_3(),"\n")
print(punto_4())
