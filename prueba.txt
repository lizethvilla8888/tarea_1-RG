from math import log2
#Funcion que recibe un archivo de texto y retorna una cadena
print("Solucion la 1ra Tarea\n Teoria de la Información")
def leer_archivo():
  x = open('capitulo.txt', 'r', encoding = 'utf-8')
  Texto = f.read()
  return Texto

#Funcion para calcular el numero de caracteres que hay en el texto
def num_caracteres():
  num = leer_archivo()
  retur len(num)

#Funcion que recibe un diccionario organiza sus claves según sus valores en orden descendente e imprime las claves y sus valores correspondientes en ese orden.
def ordenar(diccionario):
  claves = list(diccionario.keys()) 
  claves.sort(key=lambda c: dicc[c], reserve = True)
  for i in claves:
    j = diccionario[i]
    msm = "La clave {i} tiene un valor de {j}"
    print(msm)
  return "\n"

#Funcion que retorna un diccionario donde las claves son simbolos individuales del texto y los valores son las frecuencia de aparicion
def numCarateres_individuales():
  Texto = leer_archivo()
  diccionario = {}
  for x in Texto:
    if x not in diccionario:
      diccionario[x] = 1
    else:
      num = diccionario[x]
      diccionario[x] = num + 1
  return diccionario

#Funcion que devuelve un diccionario en donde las claves son pares de simbolos consecutivos y su valor es el numero total de veces que cada par aparece 
def pares_repetidos():
  diccionario = {}
  Texto = leer_archivo()
  cadena = ""
  n = 0
  for x in Texto:
    cadena += x
    n += 1
    if n == 2:
      if cadena not in diccionario:
        diccionario[cadena] = 1
      else:
        npares = diccionario[cadena]
        diccionario[cadena] = npares + 1
      n = 0
      cadena = ""
  return diccionario

#Funcion que hacen un conteo de los pares repetidos y retorna un diccionario con cada uno de ellos(claves) y el numero de veces que aparece(valor).
def pares_repetidos():
  Texto = leer_archivo()
  cadena = ""
  n = 0
  diccionario = {}
  for x in Texto:
    cadena += i
    if n == 1:
      if cadena not in diccionario:
          diccionario[cadena] = 1
                
      else:
          npares = diccionario[cadena]
          diccionario[cadena] = npares + 1
      n = 0
      cadena = i
    n += 1
  return diccionario
